This is pdfTeX, Version 3.141592653-2.6-1.40.24 (MiKTeX 22.10) (preloaded format=pdflatex 2022.11.2)  27 MAR 2023 19:49
entering extended mode
 \write18 enabled.
 %&-line parsing enabled.
**./theorie.tex
(theorie.tex
LaTeX2e <2022-06-01> patch level 5
L3 programming layer <2022-10-26>
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/base\article.cls
Document Class: article 2021/10/04 v1.4n Standard LaTeX document class
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/base\size10.clo
File: size10.clo 2021/10/04 v1.4n Standard LaTeX file (size option)
)
\c@part=\count185
\c@section=\count186
\c@subsection=\count187
\c@subsubsection=\count188
\c@paragraph=\count189
\c@subparagraph=\count190
\c@figure=\count191
\c@table=\count192
\abovecaptionskip=\skip47
\belowcaptionskip=\skip48
\bibindent=\dimen138
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/minted\minted.sty
Package: minted 2022/12/12 v2.7 Yet another Pygments shim for LaTeX

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/graphics\keyval.sty
Package: keyval 2022/05/29 v1.15 key=value parser (DPC)
\KV@toks@=\toks16
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/kvoptions\kvoptions.sty
Package: kvoptions 2022-06-15 v3.15 Key value format for package options (HO)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/ltxcmds\ltxcmds.sty
Package: ltxcmds 2020-05-10 v1.25 LaTeX kernel commands for general use (HO)
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/kvsetkeys\kvsetkeys.sty
Package: kvsetkeys 2022-10-05 v1.19 Key value parser (HO)
)) (C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/fvextra\fvextra.sty
Package: fvextra 2022/11/30 v1.5 fvextra - extensions and patches for fancyvrb

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/etoolbox\etoolbox.sty
Package: etoolbox 2020/10/05 v2.5k e-TeX tools for LaTeX (JAW)
\etb@tempcnta=\count193
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/fancyvrb\fancyvrb.sty
Package: fancyvrb 2023/01/19 4.5a verbatim text (tvz,hv)
\FV@CodeLineNo=\count194
\FV@InFile=\read2
\FV@TabBox=\box51
\c@FancyVerbLine=\count195
\FV@StepNumber=\count196
\FV@OutFile=\write3
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/upquote\upquote.sty
Package: upquote 2012/04/19 v1.3 upright-quote and grave-accent glyphs in verba
tim
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/lineno\lineno.sty
Package: lineno 2023/01/19 line numbers on paragraphs v5.1
\linenopenalty=\count197
\output=\toks17
\linenoprevgraf=\count198
\linenumbersep=\dimen139
\linenumberwidth=\dimen140
\c@linenumber=\count199
\c@pagewiselinenumber=\count266
\c@LN@truepage=\count267
\c@internallinenumber=\count268
\c@internallinenumbers=\count269
\quotelinenumbersep=\dimen141
\bframerule=\dimen142
\bframesep=\dimen143
\bframebox=\box52
LaTeX Info: Redefining \\ on input line 3131.
)
\c@FV@TrueTabGroupLevel=\count270
\c@FV@TrueTabCounter=\count271
\FV@TabBox@Group=\box53
\FV@TmpLength=\skip49
\c@FV@HighlightLinesStart=\count272
\c@FV@HighlightLinesStop=\count273
\FV@LoopCount=\count274
\FV@NCharsBox=\box54
\FV@BreakIndent=\dimen144
\FV@BreakIndentNChars=\count275
\FV@BreakSymbolSepLeft=\dimen145
\FV@BreakSymbolSepLeftNChars=\count276
\FV@BreakSymbolSepRight=\dimen146
\FV@BreakSymbolSepRightNChars=\count277
\FV@BreakSymbolIndentLeft=\dimen147
\FV@BreakSymbolIndentLeftNChars=\count278
\FV@BreakSymbolIndentRight=\dimen148
\FV@BreakSymbolIndentRightNChars=\count279
\c@FancyVerbLineBreakLast=\count280
\FV@LineBox=\box55
\FV@LineIndentBox=\box56
\c@FV@BreakBufferDepth=\count281
\FV@LineWidth=\dimen149
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/base\ifthen.sty
Package: ifthen 2022/04/13 v1.1d Standard LaTeX ifthen package (DPC)
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/tools\calc.sty
Package: calc 2017/05/25 v4.3 Infix arithmetic (KKT,FJ)
\calc@Acount=\count282
\calc@Bcount=\count283
\calc@Adimen=\dimen150
\calc@Bdimen=\dimen151
\calc@Askip=\skip50
\calc@Bskip=\skip51
LaTeX Info: Redefining \setlength on input line 80.
LaTeX Info: Redefining \addtolength on input line 81.
\calc@Ccount=\count284
\calc@Cskip=\skip52
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/tools\shellesc.sty
Package: shellesc 2019/11/08 v1.0c unified shell escape interface for LaTeX
Package shellesc Info: Unrestricted shell escape enabled on input line 75.
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/ifplatform\ifplatform.s
ty
Package: ifplatform 2017/10/13 v0.4a Testing for the operating system

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/pdftexcmds\pdftexcmds
.sty
Package: pdftexcmds 2020-06-27 v0.33 Utility functions of pdfTeX for LuaTeX (HO
)

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/infwarerr\infwarerr.s
ty
Package: infwarerr 2019/12/03 v1.5 Providing info/warning/error messages (HO)
) (C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/iftex\iftex.sty
Package: iftex 2022/02/03 v1.0f TeX engine tests
)
Package pdftexcmds Info: \pdf@primitive is available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode found.
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/catchfile\catchfile.s
ty
Package: catchfile 2019/12/09 v1.8 Catch the contents of a file (HO)

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/etexcmds\etexcmds.sty
Package: etexcmds 2019/12/15 v1.7 Avoid name clashes with e-TeX commands (HO)
)) (C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/iftex\ifluatex.sty
Package: ifluatex 2019/10/25 v1.5 ifluatex legacy package. Use iftex instead.
)) (C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/xstring\xstring.sty
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/generic/xstring\xstring.tex
\integerpart=\count285
\decimalpart=\count286
)
Package: xstring 2023/01/14 v1.85 String manipulations (CT)
) (C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/framed\framed.sty
Package: framed 2011/10/22 v 0.96: framed or shaded text with page breaks
\OuterFrameSep=\skip53
\fb@frw=\dimen152
\fb@frh=\dimen153
\FrameRule=\dimen154
\FrameSep=\dimen155
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/float\float.sty
Package: float 2001/11/08 v1.3d Float enhancements (AL)
\c@float@type=\count287
\float@exts=\toks18
\float@box=\box57
\@float@everytoks=\toks19
\@floatcapt=\box58
)
\minted@appexistsfile=\read3
\minted@bgbox=\box59
\minted@code=\write4
\c@minted@FancyVerbLineTemp=\count288
\c@minted@pygmentizecounter=\count289
\@float@every@listing=\toks20
\c@listing=\count290
)
runsystem(if not exist _minted-theorie mkdir _minted-theorie)...executed.


(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/xcolor\xcolor.sty
Package: xcolor 2022/06/12 v2.14 LaTeX color extensions (UK)

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/graphics-cfg\color.cfg
File: color.cfg 2016/01/02 v1.6 sample color configuration
)
Package xcolor Info: Driver file: pdftex.def on input line 227.

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/graphics-def\pdftex.def
File: pdftex.def 2022/09/22 v1.2b Graphics/color driver for pdftex
\stockwidth=\dimen156
\stockheight=\dimen157
)
(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/graphics\mathcolor.ltx)
Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1353.
Package xcolor Info: Model `hsb' substituted by `rgb' on input line 1357.
Package xcolor Info: Model `RGB' extended on input line 1369.
Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1371.
Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1372.
Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1373.
Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1374.
Package xcolor Info: Model `Gray' substituted by `gray' on input line 1375.
Package xcolor Info: Model `wave' substituted by `hsb' on input line 1376.
)
runsystem(for ^%i in (pygmentize.exe pygmentize.bat pygmentize.cmd) do set > th
eorie.aex <nul: /p x=^%~$PATH:i>> theorie.aex)...executed.

runsystem(del theorie.aex)...executed.


(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/latex/l3backend\l3backend-pdf
tex.def
File: l3backend-pdftex.def 2022-10-26 L3 backend support: PDF output (pdfTeX)
\l__color_backend_stack_int=\count291
\l__pdf_internal_box=\box60
) (theorie.aux)
\openout1 = `theorie.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 9.
LaTeX Font Info:    ... okay on input line 9.

(C:\Users\manue\AppData\Local\Programs\MiKTeX\tex/context/base/mkii\supp-pdf.mk
ii
[Loading MPS to PDF converter (version 2006.09.02).]
\scratchcounter=\count292
\scratchdimen=\dimen158
\scratchbox=\box61
\nofMPsegments=\count293
\nofMParguments=\count294
\everyMPshowfont=\toks21
\MPscratchCnt=\count295
\MPscratchDim=\dimen159
\MPnumerator=\count296
\makeMPintoPDFobject=\count297
\everyMPtoPDFconversion=\toks22
)
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <12> on input line 13.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <8> on input line 13.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <6> on input line 13.
\openout3 = `theorie.pyg'.

 (_minted-theorie/default.pygstyle)
(_minted-theorie/CBBCE181D0C935A77097A9F5BC89EEA638F7BBB1B0F3B669590D85C4617CA5
55.pygtex
LaTeX Font Info:    Font shape `OT1/cmtt/bx/n' in size <10> not available
(Font)              Font shape `OT1/cmtt/m/n' tried instead on input line 4.
)

! LaTeX Error: Environment flusleft undefined.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.37 \begin{flusleft}
                     
? r
OK, entering \nonstopmode...

! LaTeX Error: \begin{document} ended by \end{flusleft}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.66 \end{flusleft}
                   
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

[1

{C:/Users/manue/AppData/Local/MiKTeX/fonts/map/pdftex/pdftex.map}]
\openout3 = `theorie.pyg'.


(_minted-theorie/5DC3AF8760D1F6279A2C1FE2588711C438F7BBB1B0F3B669590D85C4617CA5
55.pygtex)
Underfull \hbox (badness 10000) in paragraph at lines 87--91

 []


! LaTeX Error: \verb illegal in argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.91 \subsection{\verb|int x = *(**arr + 1);}
                                             
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Undefined control sequence.
\@noligs ...lig@list \let '\textquotesingle \let `
                                                  \textasciigrave \ifx \enco...
l.91 \subsection{\verb|int x = *(**arr + 1);}
                                             
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\@noligs ... \upquote@cmtt \def '{\char 13 }\def `
                                                  {\char 18 }\fi \fi 
l.91 \subsection{\verb|int x = *(**arr + 1);}
                                             
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.91 \subsection{\verb|int x = *(**arr + 1);}
                                             
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \large \bfseries }{\@firstoftwo {\@sverb }}\def \reserved@b \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.91 \subsection{\verb|int x = *(**arr + 1);}
                                             
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 92--100

 []

[2]

! LaTeX Error: \verb illegal in argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.100 ...ection{\verb|int y = *(*(*arr + 1) + 1);}
                                                  
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Undefined control sequence.
\@noligs ...lig@list \let '\textquotesingle \let `
                                                  \textasciigrave \ifx \enco...
l.100 ...ection{\verb|int y = *(*(*arr + 1) + 1);}
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\@noligs ... \upquote@cmtt \def '{\char 13 }\def `
                                                  {\char 18 }\fi \fi 
l.100 ...ection{\verb|int y = *(*(*arr + 1) + 1);}
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.100 ...ection{\verb|int y = *(*(*arr + 1) + 1);}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \large \bfseries }{\@firstoftwo {\@sverb }}\def \reserved@b \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.100 ...ection{\verb|int y = *(*(*arr + 1) + 1);}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 10000) in paragraph at lines 101--103

 []


! LaTeX Error: \verb illegal in argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.103 ...ection{\verb|int z = **(*(arr + 1) + 1);}
                                                  
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Undefined control sequence.
\@noligs ...lig@list \let '\textquotesingle \let `
                                                  \textasciigrave \ifx \enco...
l.103 ...ection{\verb|int z = **(*(arr + 1) + 1);}
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\@noligs ... \upquote@cmtt \def '{\char 13 }\def `
                                                  {\char 18 }\fi \fi 
l.103 ...ection{\verb|int z = **(*(arr + 1) + 1);}
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.103 ...ection{\verb|int z = **(*(arr + 1) + 1);}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \large \bfseries }{\@firstoftwo {\@sverb }}\def \reserved@b \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.103 ...ection{\verb|int z = **(*(arr + 1) + 1);}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

\openout3 = `theorie.pyg'.


(_minted-theorie/97026FEF7207D315FFA7B5DB6B255B6838F7BBB1B0F3B669590D85C4617CA5
55.pygtex [3
! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@firstoftwo has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoftwo was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\let ^\bgroup \pri...
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@firstoftwo has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoftwo was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\let ^\bgroup \pri...
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@firstoftwo has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoftwo was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.21 \end{Verbatim}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.21 \end{Verbatim}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\let ^\bgroup \pri...
l.21 \end{Verbatim}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

])
! Undefined control sequence.
l.149 Like in the last exercise the \veb
                                        |+ 1| just means next row.
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

\openout3 = `theorie.pyg'.


(_minted-theorie/CB47F342D0A76C9AA884EDB1E313089638F7BBB1B0F3B669590D85C4617CA5
55.pygtex) [4]
\openout3 = `theorie.pyg'.


(_minted-theorie/D6EB220C5EE51AE4BF0C9CBB1F4B057938F7BBB1B0F3B669590D85C4617CA5
55.pygtex) [5] (theorie.aux)
runsystem(del theorie.pyg)...executed.

 ) 
Here is how much of TeX's memory you used:
 5417 strings out of 475380
 107600 string characters out of 2776772
 499987 words of memory out of 3000000
 26735 multiletter control sequences out of 15000+600000
 473711 words of font info for 44 fonts, out of 8000000 for 9000
 1141 hyphenation exceptions out of 8191
 74i,7n,77p,4972b,510s stack positions out of 10000i,1000n,20000p,200000b,80000s
<C:/Users/manue/AppData/Local/Programs/MiKTeX/fonts/type1/public/amsfonts/cm/
cmbx12.pfb><C:/Users/manue/AppData/Local/Programs/MiKTeX/fonts/type1/public/ams
fonts/cm/cmitt10.pfb><C:/Users/manue/AppData/Local/Programs/MiKTeX/fonts/type1/
public/amsfonts/cm/cmr10.pfb><C:/Users/manue/AppData/Local/Programs/MiKTeX/font
s/type1/public/amsfonts/cm/cmr12.pfb><C:/Users/manue/AppData/Local/Programs/MiK
TeX/fonts/type1/public/amsfonts/cm/cmr17.pfb><C:/Users/manue/AppData/Local/Prog
rams/MiKTeX/fonts/type1/public/amsfonts/cm/cmr5.pfb><C:/Users/manue/AppData/Loc
al/Programs/MiKTeX/fonts/type1/public/amsfonts/cm/cmtt10.pfb><C:/Users/manue/Ap
pData/Local/Programs/MiKTeX/fonts/type1/public/amsfonts/cm/cmtt12.pfb>
Output written on theorie.pdf (5 pages, 115256 bytes).
PDF statistics:
 58 PDF objects out of 1000 (max. 8388607)
 0 named destinations out of 1000 (max. 500000)
 1 words of extra memory for PDF output out of 10000 (max. 10000000)

